head(df10)
head(df20)
head(df30)
head(df40)
head(df50)
head(df60)
head(df70)
head(df80)
# Join data frame 'comb_mdata' to the map
sPDF <- joinCountryData2Map(df, joinCode='NAME', nameJoinColumn='Country')
# Generate the Map
output$mPlot <- renderPlot({
mapParams <- mapPolys(input$select, nameColumnToPlot='Deaths', mapRegion='world',
missingCountryCol='dark grey', numCats=10,
colourPalette=c('green4','green1','greenyellow','yellow','yellow2','orange','coral','red','red3','red4'),
addLegend=TRUE,
oceanCol='light blue')
mtext("[Grey Color: No Data Available]",side=1,line=-1)
})
# Define server logic ----
server <- function(input, output) {
output$selected_var <- renderText({
paste("You have selected", input$select)
})
# Join data frame 'comb_mdata' to the map
sPDF <- joinCountryData2Map(df, joinCode='NAME', nameJoinColumn='Country')
# Generate the Map
output$mPlot <- renderPlot({
mapParams <- mapPolys(input$select, nameColumnToPlot='Deaths', mapRegion='world',
missingCountryCol='dark grey', numCats=10,
colourPalette=c('green4','green1','greenyellow','yellow','yellow2','orange','coral','red','red3','red4'),
addLegend=TRUE,
oceanCol='light blue')
mtext("[Grey Color: No Data Available]",side=1,line=-1)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Run the app ----
shinyApp(ui = ui, server = server)
head(df)
# Define server logic ----
server <- function(input, output) {
output$selected_var <- renderText({
paste("You have selected", input$select)
})
sPDF <- joinCountryData2Map(df, joinCode='NAME', nameJoinColumn='Country')
# Generate the Map
output$mPlot <- renderPlot({
mapParams <- mapPolys(input$select, nameColumnToPlot='Deaths', mapRegion='world',
missingCountryCol='dark grey', numCats=10,
colourPalette=c('green4','green1','greenyellow','yellow','yellow2','orange','coral','red','red3','red4'),
addLegend=TRUE,
oceanCol='light blue')
mtext("[Grey Color: No Data Available]",side=1,line=-1)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
head(df)
# Run the app ----
shinyApp(ui = ui, server = server)
sPDF <- joinCountryData2Map(df, joinCode='NAME', nameJoinColumn='Country')
# Generate the Map
output$mPlot <- renderPlot({
mapParams <- mapPolys(input$select, nameColumnToPlot='Deaths', mapRegion='world',
missingCountryCol='dark grey', numCats=10,
colourPalette=c('green4','green1','greenyellow','yellow','yellow2','orange','coral','red','red3','red4'),
addLegend=TRUE,
oceanCol='light blue')
mtext("[Grey Color: No Data Available]",side=1,line=-1)
})
# Define server logic ----
server <- function(input, output) {
output$selected_var <- renderText({
paste("You have selected", input$select)
})
sPDF <- joinCountryData2Map(df, joinCode='NAME', nameJoinColumn='Country')
# Generate the Map
output$mPlot <- renderPlot({
mapParams <- mapPolys(input$select, nameColumnToPlot='Deaths', mapRegion='world',
missingCountryCol='dark grey', numCats=10,
colourPalette=c('green4','green1','greenyellow','yellow','yellow2','orange','coral','red','red3','red4'),
addLegend=TRUE,
oceanCol='light blue')
mtext("[Grey Color: No Data Available]",side=1,line=-1)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
head(df10)
# Define server logic ----
server <- function(input, output) {
output$selected_var <- renderText({
paste("You have selected", input$select)
})
sPDF <- joinCountryData2Map(df, joinCode='NAME', nameJoinColumn='Country')
# Generate the Map
output$mPlot <- renderPlot({
mapParams <- mapPolys(input$select, nameColumnToPlot='Deaths', mapRegion='world',
missingCountryCol='dark grey', numCats=10,
colourPalette=c('green4','green1','greenyellow','yellow','yellow2','orange','coral','red','red3','red4'),
addLegend=TRUE,
oceanCol='light blue')
mtext("[Grey Color: No Data Available]",side=1,line=-1)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
sPDF <- joinCountryData2Map(df, joinCode='NAME', nameJoinColumn='Country')
# Generate the Map
output$mPlot <- renderPlot({
mapParams <- mapPolys(input$select, nameColumnToPlot='Deaths', mapRegion='world',
missingCountryCol='dark grey', numCats=10,
colourPalette=c('green4','green1','greenyellow','yellow','yellow2','orange','coral','red','red3','red4'),
addLegend=TRUE,
oceanCol='light blue')
mtext("[Grey Color: No Data Available]",side=1,line=-1)
})
# Define server logic ----
server <- function(input, output) {
output$selected_var <- renderText({
paste("You have selected", input$select)
})
sPDF <- joinCountryData2Map(df, joinCode='NAME', nameJoinColumn='Country')
# Generate the Map
output$mPlot <- renderPlot({
mapParams <- mapPolys(input$select, nameColumnToPlot='Deaths', mapRegion='world',
missingCountryCol='dark grey', numCats=10,
colourPalette=c('green4','green1','greenyellow','yellow','yellow2','orange','coral','red','red3','red4'),
addLegend=TRUE,
oceanCol='light blue')
mtext("[Grey Color: No Data Available]",side=1,line=-1)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define server logic ----
server <- function(input, output) {
# output$selected_var <- renderText({
#    paste("You have selected", input$select)
#  })
sPDF <- joinCountryData2Map(df, joinCode='NAME', nameJoinColumn='Country')
# Generate the Map
output$mPlot <- renderPlot({
mapParams <- mapPolys(input$select, nameColumnToPlot='Deaths', mapRegion='world',
missingCountryCol='dark grey', numCats=10,
colourPalette=c('green4','green1','greenyellow','yellow','yellow2','orange','coral','red','red3','red4'),
addLegend=TRUE,
oceanCol='light blue')
mtext("[Grey Color: No Data Available]",side=1,line=-1)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define server logic ----
server <- function(input, output) {
output$selected_var <- renderText({
paste("You have selected", input$select)
})
sPDF <- joinCountryData2Map(df, joinCode='NAME', nameJoinColumn='Country')
# Generate the Map
output$mPlot <- renderPlot({
mapParams <- mapPolys(sPDF, nameColumnToPlot='Deaths', mapRegion='world',
missingCountryCol='dark grey', numCats=10,
colourPalette=c('green4','green1','greenyellow','yellow','yellow2','orange','coral','red','red3','red4'),
addLegend=TRUE,
oceanCol='light blue')
mtext("[Grey Color: No Data Available]",side=1,line=-1)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define server logic ----
server <- function(input, output) {
output$selected_var <- renderText({
paste("You have selected", input$select)
})
sPDF <- joinCountryData2Map(input$select, joinCode='NAME', nameJoinColumn='Country')
# Generate the Map
output$mPlot <- renderPlot({
mapParams <- mapPolys(sPDF, nameColumnToPlot='Deaths', mapRegion='world',
missingCountryCol='dark grey', numCats=10,
colourPalette=c('green4','green1','greenyellow','yellow','yellow2','orange','coral','red','red3','red4'),
addLegend=TRUE,
oceanCol='light blue')
mtext("[Grey Color: No Data Available]",side=1,line=-1)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
library(shiny)
library(maps)
library(mapproj)
library(rworldmap)
suicide_rates <- read.csv("/Users/sambryan/Documents/School/WPI/2022_Fall/DS501/Homework/Homework_6/sbryan_deliverables/data/Crude suicide rates.csv")
head(suicide_rates)
summary(suicide_rates)
data <- aggregate(suicide_rates$X20to29, list(suicide_rates$Country), FUN=sum)
head(data)
df <- setNames(data,c("Country", "Deaths"))
head(df)
data10 <- aggregate(suicide_rates$X10to19, list(suicide_rates$Country), FUN=sum)
data20 <- aggregate(suicide_rates$X20to29, list(suicide_rates$Country), FUN=sum)
data30 <- aggregate(suicide_rates$X30to39, list(suicide_rates$Country), FUN=sum)
data40 <- aggregate(suicide_rates$X40to49, list(suicide_rates$Country), FUN=sum)
data50 <- aggregate(suicide_rates$X50to59, list(suicide_rates$Country), FUN=sum)
data60 <- aggregate(suicide_rates$X60to69, list(suicide_rates$Country), FUN=sum)
data70 <- aggregate(suicide_rates$X70to79, list(suicide_rates$Country), FUN=sum)
data80 <- aggregate(suicide_rates$X80_above, list(suicide_rates$Country), FUN=sum)
df10 <- setNames(data10,c("Country", "Deaths"))
df20 <- setNames(data20,c("Country", "Deaths"))
df30 <- setNames(data30,c("Country", "Deaths"))
df40 <- setNames(data40,c("Country", "Deaths"))
df50 <- setNames(data50,c("Country", "Deaths"))
df60 <- setNames(data60,c("Country", "Deaths"))
df70 <- setNames(data70,c("Country", "Deaths"))
df80 <- setNames(data80,c("Country", "Deaths"))
head(suicide_rates)
head(df10)
head(df20)
head(df30)
head(df40)
head(df50)
head(df60)
head(df70)
head(df80)
facilities <- read.csv("/Users/sambryan/Documents/School/WPI/2022_Fall/DS501/Homework/Homework_6/sbryan_deliverables/data/Facilities.csv")
head(facilities)
summary(facilities)
human_resources <- read.csv("/Users/sambryan/Documents/School/WPI/2022_Fall/DS501/Homework/Homework_6/sbryan_deliverables/data/Human resources.csv")
head(human_resources)
summary(facilities)
# Define UI ----
ui <- fluidPage(
titlePanel("Worldwide Suicides"),
sidebarLayout(
sidebarPanel("sidebar panel",
selectInput("select", h3("Select age range"),
choices = list("10 to 19" = df10, "20 to 29" = df20,
"30 to 39" = df30, "40 to 49" = df40,
"50 to 59" = df50, "60 to 69" = df60,
"70 to 79" = df70, "80 and above" = df80), selected = 1)),
mainPanel(
textOutput("selected_var"),
tabsetPanel(id="tp",
tabPanel("Map View", plotOutput("mPlot", height="560px", width="950px"))
)
)
)
)
# Define server logic ----
server <- function(input, output) {
values <- reactiveValues(df_data = input$select)
output$selected_var <- renderText({
paste("You have selected", input$select)
})
sPDF <- joinCountryData2Map(df, joinCode='NAME', nameJoinColumn='Country')
# Generate the Map
output$mPlot <- renderPlot({
mapParams <- mapPolys(sPDF, nameColumnToPlot='Deaths', mapRegion='world',
missingCountryCol='dark grey', numCats=10,
colourPalette=c('green4','green1','greenyellow','yellow','yellow2','orange','coral','red','red3','red4'),
addLegend=TRUE,
oceanCol='light blue')
mtext("[Grey Color: No Data Available]",side=1,line=-1)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
runApp('Documents/School/WPI/2022_Fall/DS501/Homework/Homework_6/sbryan_deliverables/sbryan_CaseStudy3.R')
# Define server logic ----
server <- function(input, output) {
output$selected_var <- renderText({
paste("You have selected", input$select)
})
sPDF <- joinCountryData2Map(df, joinCode='NAME', nameJoinColumn='Country')
# Generate the Map
output$mPlot <- renderPlot({
mapParams <- mapPolys(sPDF, nameColumnToPlot='Deaths', mapRegion='world',
missingCountryCol='dark grey', numCats=10,
colourPalette=c('green4','green1','greenyellow','yellow','yellow2','orange','coral','red','red3','red4'),
addLegend=TRUE,
oceanCol='light blue')
mtext("[Grey Color: No Data Available]",side=1,line=-1)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
output$selected_var <- renderText({
paste("You have selected", input$select)
})
sPDF <- joinCountryData2Map(input$select, joinCode='NAME', nameJoinColumn='Country')
# Define server logic ----
server <- function(input, output) {
output$selected_var <- renderText({
paste("You have selected", input$select)
})
sPDF <- joinCountryData2Map(input$select, joinCode='NAME', nameJoinColumn='Country')
# Generate the Map
output$mPlot <- renderPlot({
mapParams <- mapPolys(sPDF, nameColumnToPlot='Deaths', mapRegion='world',
missingCountryCol='dark grey', numCats=10,
colourPalette=c('green4','green1','greenyellow','yellow','yellow2','orange','coral','red','red3','red4'),
addLegend=TRUE,
oceanCol='light blue')
mtext("[Grey Color: No Data Available]",side=1,line=-1)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
input_df <- reactive(input$select)
sPDF <- joinCountryData2Map(input$select, joinCode='NAME', nameJoinColumn='Country')
# Define server logic ----
server <- function(input, output) {
output$selected_var <- renderText({
paste("You have selected", input$select)
})
input_df <- reactive(input$select)
sPDF <- joinCountryData2Map(input_df, joinCode='NAME', nameJoinColumn='Country')
# Generate the Map
output$mPlot <- renderPlot({
mapParams <- mapPolys(sPDF, nameColumnToPlot='Deaths', mapRegion='world',
missingCountryCol='dark grey', numCats=10,
colourPalette=c('green4','green1','greenyellow','yellow','yellow2','orange','coral','red','red3','red4'),
addLegend=TRUE,
oceanCol='light blue')
mtext("[Grey Color: No Data Available]",side=1,line=-1)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
runApp('Documents/School/WPI/2022_Fall/DS501/Homework/Homework_6/sbryan_deliverables/sbryan_CaseStudy3.R')
# Run the app ----
shinyApp(ui = ui, server = server)
values <- reactive(input$select)
sPDF <- joinCountryData2Map(values, joinCode='NAME', nameJoinColumn='Country')
runApp('Documents/School/WPI/2022_Fall/DS501/Homework/Homework_6/sbryan_deliverables/sbryan_CaseStudy3.R')
# Define UI ----
ui <- fluidPage(
titlePanel("Worldwide Suicides"),
sidebarLayout(
sidebarPanel("sidebar panel",
selectInput("select", h3("Select age range"),
choices = list("10 to 19" = df10, "20 to 29" = df20,
"30 to 39" = df30, "40 to 49" = df40,
"50 to 59" = df50, "60 to 69" = df60,
"70 to 79" = df70, "80 and above" = df80), selected = df10)),
mainPanel(
textOutput("selected_var"),
tabsetPanel(id="tp",
tabPanel("Map View", plotOutput("mPlot", height="560px", width="950px"))
)
)
)
)
# Define server logic ----
server <- function(input, output) {
output$selected_var <- renderText({
paste("You have selected", input$select)
})
reactive({
sPDF <- joinCountryData2Map(input$select, joinCode='NAME', nameJoinColumn='Country')
# Generate the Map
output$mPlot <- renderPlot({
mapParams <- mapPolys(sPDF, nameColumnToPlot='Deaths', mapRegion='world',
missingCountryCol='dark grey', numCats=10,
colourPalette=c('green4','green1','greenyellow','yellow','yellow2','orange','coral','red','red3','red4'),
addLegend=TRUE,
oceanCol='light blue')
mtext("[Grey Color: No Data Available]",side=1,line=-1)
})
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
runApp('Documents/School/WPI/2022_Fall/DS501/Homework/Homework_6/sbryan_deliverables/sbryan_CaseStudy3.R')
runApp('Documents/School/WPI/2022_Fall/DS501/Homework/Homework_6/sbryan_deliverables/sbryan_CaseStudy3.R')
runApp('Documents/School/WPI/2022_Fall/DS501/Homework/Homework_6/sbryan_deliverables/sbryan_CaseStudy3.R')
runApp('Documents/School/WPI/2022_Fall/DS501/Homework/Homework_6/sbryan_deliverables/sbryan_CaseStudy3.R')
library(shiny); runApp('Documents/School/WPI/2022_Fall/DS501/Homework/Homework_6/sbryan_deliverables/sbryan_CaseStudy3.R')
runApp('Documents/School/WPI/2022_Fall/DS501/Homework/Homework_6/sbryan_deliverables/00_onemapworking.R')
runApp('Documents/School/WPI/2022_Fall/DS501/Homework/Homework_6/sbryan_deliverables/00_onemapworking.R')
head(dfx)
t(dfx)
head(dfx)
head(t(dfx))
dfx <- df10
t(dfx)
df(dfx)
dfx <- df10
df(dfx)
dfx <- data.frame(df10)
df(dfx)
data10 <- aggregate(suicide_rates$X10to19, list(suicide_rates$Country), FUN=sum)
data20 <- aggregate(suicide_rates$X20to29, list(suicide_rates$Country), FUN=sum)
data30 <- aggregate(suicide_rates$X30to39, list(suicide_rates$Country), FUN=sum)
data40 <- aggregate(suicide_rates$X40to49, list(suicide_rates$Country), FUN=sum)
data50 <- aggregate(suicide_rates$X50to59, list(suicide_rates$Country), FUN=sum)
data60 <- aggregate(suicide_rates$X60to69, list(suicide_rates$Country), FUN=sum)
data70 <- aggregate(suicide_rates$X70to79, list(suicide_rates$Country), FUN=sum)
data80 <- aggregate(suicide_rates$X80_above, list(suicide_rates$Country), FUN=sum)
df10 <- setNames(data10,c("Country", "Deaths"))
df20 <- setNames(data20,c("Country", "Deaths"))
df30 <- setNames(data30,c("Country", "Deaths"))
df40 <- setNames(data40,c("Country", "Deaths"))
df50 <- setNames(data50,c("Country", "Deaths"))
df60 <- setNames(data60,c("Country", "Deaths"))
df70 <- setNames(data70,c("Country", "Deaths"))
df80 <- setNames(data80,c("Country", "Deaths"))
dfx <- data.frame(df10)
df(dfx)
dfx <- data.frame(df10)
df(dfx)
head(dfx)
dfx <- df10
head(dfx)
dfx <- df10
head(dfx)
runApp('Documents/School/WPI/2022_Fall/DS501/Homework/Homework_6/sbryan_deliverables/00_onemapworking.R')
library(shiny)
library(maps)
library(mapproj)
library(rworldmap)
facilities <- read.csv("/Users/sambryan/Documents/School/WPI/2022_Fall/DS501/Homework/Homework_6/sbryan_deliverables/data/Facilities.csv")
head(facilities)
summary(facilities)
human_resources <- read.csv("/Users/sambryan/Documents/School/WPI/2022_Fall/DS501/Homework/Homework_6/sbryan_deliverables/data/Human resources.csv")
head(human_resources)
summary(facilities)
# Define UI ----
ui <- fluidPage(
titlePanel("Worldwide Suicides"),
sidebarLayout(
sidebarPanel("sidebar panel",
selectInput("select", h3("Select age range"),
choices = list("10 to 19" = '1', "20 to 29" = '2',
"30 to 39" = '3', "40 to 49" = '4',
"50 to 59" = '5', "60 to 69" = '6',
"70 to 79" = '7', "80 and above" = '8'), selected = '1')),
mainPanel(
textOutput("selected_var"),
tabsetPanel(id="tp",
tabPanel("Map View", plotOutput("mPlot", height="560px", width="950px"))
)
)
)
)
# Define server logic ----
server <- function(input, output) {
output$selected_var <- renderText({
paste("You have selected", input$select)
})
# Generate the Map
output$mPlot <- renderPlot({
suicide_rates <- read.csv("/Users/sambryan/Documents/School/WPI/2022_Fall/DS501/Homework/Homework_6/sbryan_deliverables/data/Crude suicide rates.csv")
head(suicide_rates)
summary(suicide_rates)
data10 <- aggregate(suicide_rates$X10to19, list(suicide_rates$Country), FUN=sum)
data20 <- aggregate(suicide_rates$X20to29, list(suicide_rates$Country), FUN=sum)
data30 <- aggregate(suicide_rates$X30to39, list(suicide_rates$Country), FUN=sum)
data40 <- aggregate(suicide_rates$X40to49, list(suicide_rates$Country), FUN=sum)
data50 <- aggregate(suicide_rates$X50to59, list(suicide_rates$Country), FUN=sum)
data60 <- aggregate(suicide_rates$X60to69, list(suicide_rates$Country), FUN=sum)
data70 <- aggregate(suicide_rates$X70to79, list(suicide_rates$Country), FUN=sum)
data80 <- aggregate(suicide_rates$X80_above, list(suicide_rates$Country), FUN=sum)
df10 <- setNames(data10,c("Country", "Deaths"))
df20 <- setNames(data20,c("Country", "Deaths"))
df30 <- setNames(data30,c("Country", "Deaths"))
df40 <- setNames(data40,c("Country", "Deaths"))
df50 <- setNames(data50,c("Country", "Deaths"))
df60 <- setNames(data60,c("Country", "Deaths"))
df70 <- setNames(data70,c("Country", "Deaths"))
df80 <- setNames(data80,c("Country", "Deaths"))
if (input$select == '1') dfx <- df10
if (input$select == '2') dfx <- df20
if (input$select == '3') dfx <- df30
if (input$select == '4') dfx <- df40
if (input$select == '5') dfx <- df50
if (input$select == '6') dfx <- df60
if (input$select == '7') dfx <- df70
if (input$select == '8') dfx <- df80
#dfx <- data.frame(df10)
#dfx <- df10
#head(dfx)
sPDF <- joinCountryData2Map(dfx, joinCode='NAME', nameJoinColumn='Country')
mapParams <- mapPolys(sPDF, nameColumnToPlot='Deaths', mapRegion='world',
missingCountryCol='dark grey', numCats=10,
colourPalette=c('green4','green1','greenyellow','yellow','yellow2','orange','coral','red','red3','red4'),
addLegend=TRUE,
oceanCol='light blue')
mtext("[Grey Color: No Data Available]",side=1,line=-1)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
head(facilities)
human_resources <- read.csv("/Users/sambryan/Documents/School/WPI/2022_Fall/DS501/Homework/Homework_6/sbryan_deliverables/data/Human resources.csv")
head(human_resources)
head(facilities)
dfx <- facilities$Country + facilities$Mental._hospitals
dfx <- data.frame(facilities$Country, facilities$Mental._hospitals)
head(dfx)
head(facilities)
runApp('Documents/School/WPI/2022_Fall/DS501/Homework/Homework_6/sbryan_deliverables/sbryan_caseStudy3.R')
dfx <- data.frame(facilities$Country, facilities$residential_facilities)
head(dfx)
runApp('Documents/School/WPI/2022_Fall/DS501/Homework/Homework_6/sbryan_deliverables/sbryan_caseStudy3.R')
library(shiny); runApp('Documents/School/WPI/2022_Fall/DS501/Homework/Homework_6/sbryan_deliverables/sbryan_caseStudy3.R')
runApp('Documents/School/WPI/2022_Fall/DS501/Homework/Homework_6/sbryan_deliverables/sbryan_caseStudy3.R')
head(df10)
runApp('Documents/School/WPI/2022_Fall/DS501/Homework/Homework_6/sbryan_deliverables/sbryan_caseStudy3.R')
